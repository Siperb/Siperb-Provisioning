{"version":3,"file":"Siperb-Provisioning.min.js","sources":["Siperb-Provisioning.js"],"sourcesContent":["// -----------------------------------------------\n//  Copyright Â© - SIPERB LTD - All Rights Reserved\n// ===============================================\n// File: Siperb-Provisioning.js\n// Date: August 2025\n// Git: https://github.com/Siperb\n\n// Define the Siperb namespace object\nconst Siperb = {\n    /**\n     * GetSession - fetches your session token using you access token.\n     * @param {string} accessToken - your access token\n     * @returns {Promise<Object>} - resolves with session object\n     */\n    GetSession(accessToken){\n        return new Promise(async (resolve, reject) => {\n            try {\n                const response = await fetch(`https://api.siperb.com/Login`, {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${accessToken}`\n                    }\n                });\n                if (response.ok) {\n                    try{\n                        const data = await response.json();\n                        console.log(`GetSession: %cSession retrieved successfully`, \"color: green;\");\n\n                        if(typeof window !== 'undefined'){\n                            window.SiperbAPI = window.SiperbAPI || {};\n                            window.SiperbAPI.SESSION_TOKEN = data.SessionToken;\n                            window.SiperbAPI.USER_ID = data.UserId;\n                        }\n                        return resolve(data);\n                    }\n                    catch (error) {\n                        console.log(`GetSession: %cError occurred while parsing response: ${error.message}`, \"color: red;\");\n                        return reject();\n                    }\n                } else {\n                    console.log(`GetSession: %cFailed to retrieve session`, \"color: red;\");\n                    return reject();\n                }\n            } catch (error) {\n                console.log(`GetSession: %cError occurred: ${error.message}`, \"color: red;\");\n                return reject();\n            }\n        });\n    },\n    /**\n     * GetDevices - fetches session data and sets window.Siperb.SESSION\n     * @param {Object} options - options for session retrieval\n     * @returns {Promise<Object>} - resolves with session object\n     */\n    GetDevices(options) {\n        return new Promise(async function (resolve, reject) {\n            let isResolved = false;\n            // Check if the session is already in localStorage\n            if(typeof options.EnableCache === \"boolean\" && options.EnableCache === true){\n                if(typeof options.SessionKey === \"string\" && options.SessionKey != \"\"){\n                    // Use the sessionKey from options or default to 'SiperbSession'\n                    console.log(`GetSession: %cUsing SessionKey: ${options.SessionKey}`, \"color: blue;\");\n                    if(typeof window !== 'undefined' && typeof window.localStorage !== \"undefined\"){\n                        let cachedSession = localStorage.getItem(options.SessionKey);\n                        if (cachedSession) {\n                            // Parse the JSON string to an object\n                            try {\n                                cachedSession = JSON.parse(cachedSession);\n                                if (typeof window !== 'undefined') {\n                                    window.SiperbAPI = window.SiperbAPI || {};\n                                    window.SiperbAPI.SESSION = cachedSession;\n                                }\n                                // Resolve but don't return.\n                                resolve(cachedSession);\n                                isResolved = true;\n                                console.log(`GetSession: %cUsing cached session`,  \"color: green;\");\n                            }\n                            catch (error) {\n                                console.log(`GetSession: %cError parsing cached session: ${error.message}`, \"color: red;\");\n                            }\n                        }\n                        // Nothing cached\n                    }\n                }\n                else {\n                    console.log(`GetSession: %cEnableCache is enabled, but no CacheKey provided`, \"color: orange;\");\n                }\n            }\n            // Not using cache, fetch from API\n\n            // Now perform the API call\n            const url = `https://api.siperb.com/Users/${options.UserId}/Devices/`;\n            const fetchOptions =  {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Api-Key': options.SessionToken\n                }\n            };\n            try{\n                let response = await fetch(url, fetchOptions);\n                if (response.ok) {\n                    // If the response is ok, we can proceed\n                    console.log(`GetSession: %cGot session from API`, \"color: green;\");\n                    // Get the Session from the response\n                    try{\n                        let data = await response.json();\n\n                        // Save the json data to the localStorage\n                        if(typeof options.EnableCache === \"boolean\" && options.EnableCache === true){\n                            if(typeof options.SessionKey === \"string\" && options.SessionKey !== \"\"){\n                                if(typeof window !== 'undefined' && typeof window.localStorage !== 'undefined'){\n                                    window.localStorage.setItem(options.SessionKey, JSON.stringify(data));\n                                    console.log(`GetSession: %cUpdated Session`, \"color: green;\");\n                                }\n                            }\n                        }\n                        if(typeof window !== 'undefined'){\n                            window.SiperbAPI = window.SiperbAPI || {};\n                            window.SiperbAPI.DEVICES = data;\n                        }\n                        if(!isResolved) resolve(data);\n                    }\n                    catch(e){\n                        console.log(`GetSession: %cError getting Session: ${e.message}`, \"color: red;\");\n                    }\n                }\n                else if(response.status == 403){\n                    // ======================================================================\n                    // You are not actually logged in, or there is an issue with your session\n                    // ======================================================================\n                    console.log(`GetSession: %c403 Forbidden`, \"color: red;\");\n                    if(!isResolved) resolve(null);\n\n                }\n                else {\n                    console.log(`GetSession: %cBad Response ${response.status}`, \"color: red;\");\n                    if(!isResolved) resolve(null);\n                }\n            }\n            catch(e){\n                console.log(`GetSession: %cError getting session: ${e.message}`, \"color: red;\");\n                if(!isResolved) resolve(null);\n            }\n        });\n    },\n    /**\n     * GetProvisioning - fetches provisioning data and sets window.Siperb.PROVISIONING\n     * @param {Object} options - options for provisioning retrieval\n     * @returns {Promise<Object>} - resolves with provisioning object\n     */\n    GetProvisioning(options) {\n        return new Promise(async function (resolve, reject) {\n            let isResolved = false;\n            // Check if the Provisioning is already in localStorage\n            if(typeof options.EnableCache === \"boolean\" && options.EnableCache === true){\n                if(typeof options.ProvisioningKey === \"string\" && options.ProvisioningKey != \"\"){\n                    // Use the ProvisioningKey from options or default to 'SiperbProvisioning'\n                    console.log(`GetProvisioning: %cUsing ProvisioningKey: ${options.ProvisioningKey}`, \"color: blue;\");\n                    if(typeof window !== 'undefined' && typeof window.localStorage !== \"undefined\"){\n                        let cachedProvisioning = localStorage.getItem(options.ProvisioningKey);\n                        if (cachedProvisioning) {\n                            // Parse the JSON string to an object\n                            try {\n                                cachedProvisioning = JSON.parse(cachedProvisioning);\n                                if (typeof window !== 'undefined') {\n                                    window.SiperbAPI = window.SiperbAPI || {};\n                                    window.SiperbAPI.PROVISIONING = cachedProvisioning;\n                                }\n                                // Resolve but don't return.\n                                resolve(cachedProvisioning);\n                                isResolved = true;\n                                console.log(`GetProvisioning: %cUsing cached Provisioning`,  \"color: green;\");\n                            }\n                            catch (error) {\n                                console.log(`GetProvisioning: %cError parsing cached Provisioning: ${error.message}`, \"color: red;\");\n                            }\n                        }\n                        // Nothing cached\n                    }\n                }\n                else {\n                    console.log(`GetProvisioning: %cEnableCache is enabled, but no ProvisioningKey provided`, \"color: orange;\");\n                }\n            }\n            // Not using cache, fetch from API\n\n            // Now perform the API call\n        const url = `https://api.siperb.com/Users/${options.UserId}/Devices/${options.DeviceToken}/?password=yes&settings_json=yes`;\n            const fetchOptions =  {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Api-Key': options.SessionToken\n                }\n            };\n            try{\n                let response = await fetch(url, fetchOptions);\n                if (response.ok) {\n                    // If the response is ok, we can proceed\n                    console.log(`GetProvisioning: %cGot Provisioning from API`, \"color: green;\");\n                    // Get the Provisioning from the response\n                    try{\n                        let data = await response.json();\n\n                        // Save the json data to the localStorage\n                        if(typeof options.EnableCache === \"boolean\" && options.EnableCache === true){\n                            if(typeof options.ProvisioningKey === \"string\" && options.ProvisioningKey !== \"\"){\n                                if(typeof window !== 'undefined' && typeof window.localStorage !== 'undefined'){\n                                    window.localStorage.setItem(options.ProvisioningKey, JSON.stringify(data));\n                                    console.log(`GetProvisioning: %cUpdated Provisioning`, \"color: green;\");\n                                }\n                            }\n                        }\n                        if(typeof window !== 'undefined'){\n                            window.SiperbAPI = window.SiperbAPI || {};\n                            window.SiperbAPI.PROVISIONING = data;\n                        }\n                        if(!isResolved) resolve(data);\n                    }\n                    catch(e){\n                        console.log(`GetProvisioning: %cError getting Provisioning: ${e.message}`, \"color: red;\");\n                    }\n                }\n                else if(response.status == 403){\n                    // ======================================================================\n                    // You are not actually logged in, or there is an issue with your session\n                    // ======================================================================\n                    console.log(`GetProvisioning: %c403 Forbidden`, \"color: red;\");\n                    if(!isResolved) resolve(null);\n\n                }\n                else {\n                    console.log(`GetProvisioning: %cBad Response ${response.status}`, \"color: red;\");\n                    if(!isResolved) resolve(null);\n                }\n            }\n            catch(e){\n                console.log(`GetProvisioning: %cError getting Provisioning: ${e.message}`, \"color: red;\");\n                if(!isResolved) resolve(null);\n            }\n        });\n    }\n};\n\n// Export for modules (ESM/CommonJS)\nexport default Siperb;\n\n// Attach to window for browser global usage\nif (typeof window !== 'undefined') {\n    window.SiperbAPI = window.SiperbAPI || {};\n    Object.assign(window.SiperbAPI, Siperb);\n}"],"names":["Siperb","GetSession","accessToken","Promise","async","resolve","reject","response","fetch","method","headers","Authorization","ok","console","log","data","json","window","SiperbAPI","SESSION_TOKEN","SessionToken","USER_ID","UserId","error","message","GetDevices","options","isResolved","EnableCache","SessionKey","localStorage","cachedSession","getItem","JSON","parse","SESSION","url","fetchOptions","setItem","stringify","DEVICES","e","status","GetProvisioning","ProvisioningKey","cachedProvisioning","PROVISIONING","DeviceToken","Object","assign"],"mappings":"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"}